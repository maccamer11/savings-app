{"version":3,"sources":["context/bill-context.js","components/addbills/addbill.component.js","components/bill-list/bill-list.component.js","components/billtotal/billtotal.component.js","components/bill-options/bill-options.component.js","components/edit-bills/edit-bills.component.js","App.js","serviceWorker.js","index.js"],"names":["BillContext","createContext","AddBill","useState","newBillTitle","setNewBillTitle","newBillCost","setNewBillCost","updateBills","useContext","className","placeholder","type","value","onChange","e","target","onClick","costValid","Number","parseFloat","titleValid","split","find","char","validateBill","title","monthlyCost","enabled","BillList","bills","editBill","setEditModeEnabled","map","bill","index","key","checked","BillTotal","selectedCostInterval","moneyIntervalTransform","cost","reduce","acc","val","toFixed","BillOptions","setSelectedCostInterval","innerText","EditBills","deleteBill","billIndex","App","editModeEnabled","Boolean","window","location","hostname","match","ReactDOM","render","children","setBills","useEffect","JSON","parse","localStorage","getItem","alphabeticalOrder","sort","a","b","toUpperCase","Provider","updatedBills","setItem","stringify","BillToUpdate","billsFiltered","filter","billToDelete","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c07401cf.chunk.js","sourcesContent":["import React, { useEffect, useState, createContext } from 'react';\n\nconst BillContext = createContext();\n\nconst BillProvider = ({ children }) => {\n    const [bills, setBills] = useState([]);\n    const [selectedCostInterval, setSelectedCostInterval] = useState('Monthly');\n    const [editModeEnabled, setEditModeEnabled] = useState(false);\n\n    useEffect(() => {\n        setBills(JSON.parse(localStorage.getItem('portexe-bills')) || []);\n    }, [setBills])\n\n\n    const updateBills = (bill) => {\n        const updatedBills = alphabeticalOrder([\n            ...bills, bill\n        ]);\n        //can only store strings in localstorage, hence stringify\n        localStorage.setItem('portexe-bills', JSON.stringify(updatedBills))\n        setBills(updatedBills);\n    };\n\n    const editBill = (BillToUpdate) => {\n        const billsFiltered = bills.filter((bill) => bill.title !== BillToUpdate.title);\n        const updatedBills = alphabeticalOrder([\n            ...billsFiltered, BillToUpdate\n        ]);\n        localStorage.setItem('portexe-bills', JSON.stringify(updatedBills))\n        setBills(updatedBills);\n    };\n\n    //keep order upon toggle\n    const alphabeticalOrder = (bills) => {\n        return bills.sort((a, b) =>\n            a.title.toUpperCase() < b.title.toUpperCase() ? -1 : 0);\n    }\n\n    const deleteBill = (billToDelete) => {\n        const updatedBills = bills.filter((bill) => bill.title !== billToDelete.title);\n        localStorage.setItem('portexe-bills', JSON.stringify(updatedBills))\n        setBills(updatedBills);\n    }\n\n    return (\n        <BillContext.Provider value={{\n            bills,\n            updateBills,\n            editBill,\n            selectedCostInterval,\n            setSelectedCostInterval,\n            setEditModeEnabled,\n            editModeEnabled,\n            deleteBill\n        }}>\n            {children}\n        </BillContext.Provider>\n    );\n};\n\nexport { BillContext, BillProvider };","import React, { useContext, useState } from 'react';\n\nimport './addbill.styles.css'\nimport { BillContext } from '../../context/bill-context';\n\nconst AddBill = () => {\n\n    const [newBillTitle, setNewBillTitle] = useState('');\n    const [newBillCost, setNewBillCost] = useState('');\n\n    //let's use context, BillContext, and from this context, I'm grabbing updateBills\n    const { updateBills } = useContext(BillContext)\n\n    const validateBill = () => {\n        //newBillCost is a number\n        const costValid = newBillCost && Number.parseFloat(newBillCost);\n        //newBillCost is not only whitespace\n        const titleValid = newBillTitle && newBillTitle.split('').find(char => char !== ' ');\n        return costValid && titleValid;\n    }\n\n    const clearForm = () => {\n        setNewBillTitle('');\n        setNewBillCost('');\n    }\n\n\n    return (\n        <div className='add-bill-container'>\n            <h1 className='text-center'>Saver Widget</h1>\n            <h3 className='text-center'>See how much you can save!</h3>\n            <input\n                className='add-bill-form-control form-control'\n                placeholder='Enter bill title'\n                type='text'\n                value={newBillTitle}\n                onChange={(e) => setNewBillTitle(e.target.value)} />\n\n            <input\n                className='add-bill-form-control form-control'\n                placeholder='Enter monthly bill amount'\n                type='number'\n                value={newBillCost}\n                onChange={(e) => setNewBillCost(e.target.value)} />\n            <button className='add-bill-form-control btn btn-info'\n                onClick={() => {\n                    if (validateBill()) {\n                        updateBills({\n                            title: newBillTitle,\n                            monthlyCost: newBillCost,\n                            enabled: true\n                        });\n                        clearForm();\n                    }\n                }}> Add Bill</button>\n        </div>\n    );\n}\n\nexport default AddBill;","import React, { useContext, useState } from 'react';\nimport { BillContext } from '../../context/bill-context';\n\n\nimport './bill-list.styles.css'\n\nconst BillList = () => {\n\n    const { bills, editBill, setEditModeEnabled } = useContext(BillContext);\n\n\n    return (\n        <div className='bill-list-container'>\n            <button className='edit-mode-btn btn btn-info' onClick={() => setEditModeEnabled(true)}>Edit</button>\n            {\n                bills.map((bill, index) => {\n                    return (\n                        <div key={index} className='bill-list-row text-center'>\n                            <div className='bill-list-row-content'>\n                                <input type='checkbox'\n                                    className='form-check-input'\n                                    checked={bill.enabled}\n                                    onChange={() => editBill({\n                                        title: bill.title,\n                                        monthlyCost: bill.monthlyCost,\n                                        enabled: !bill.enabled\n                                    })} />\n                                {bill.title} - ${bill.monthlyCost}\n                            </div>\n                        </div>\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default BillList","import React, { useContext, useState } from 'react';\n\nimport './billtotal.styles.css'\nimport { BillContext } from '../../context/bill-context';\n\nconst BillTotal = () => {\n\n    const { bills, selectedCostInterval } = useContext(BillContext);\n\n    const moneyIntervalTransform = (cost) => {\n        const monthlyCost = Number.parseFloat(cost);\n        switch (selectedCostInterval) {\n            case 'Monthly':\n                return monthlyCost;\n            case 'Yearly':\n                return monthlyCost * 12;\n            case 'Weekly':\n                return monthlyCost * 12 / 52;\n            case 'Daily':\n                return monthlyCost * 12 / 365;\n\n            default:\n                return 0;\n        }\n    };\n\n    return (\n        <>\n            <div className='bill-total-container text-center'>{selectedCostInterval} bill cost:\n        <span className='total-cost'>\n                    {\n                        '$' + bills.reduce((acc, val) => {\n                            return val.enabled ?\n                                moneyIntervalTransform(val.monthlyCost) + acc : acc\n                        }, 0).toFixed(2)\n                    }\n                </span>\n            </div>\n            <div className='total-saved-container text-center'>\n                {selectedCostInterval} saved:\n                <span className='total-saved'>\n                    {\n                        '$' + bills.reduce((acc, val) => {\n                            return !val.enabled ?\n                                moneyIntervalTransform(val.monthlyCost) + acc : acc\n                        }, 0).toFixed(2)\n                    }\n                </span>\n            </div>\n        </>\n    );\n}\n\nexport default BillTotal;","import React, { useContext, useState } from 'react';\n\nimport './bill-options.styles.css'\nimport { BillContext } from '../../context/bill-context';\n\nconst BillOptions = () => {\n\n    const { selectedCostInterval, setSelectedCostInterval } = useContext(BillContext)\n\n    return (\n        <div className='interval-option-container'>\n            <div className={selectedCostInterval === 'Daily' ? 'selected-interval' : 'interval'}\n                onClick={(e) => setSelectedCostInterval(e.target.innerText)}>Daily</div>\n            <div className={selectedCostInterval === 'Weekly' ? 'selected-interval' : 'interval'} onClick={(e) => setSelectedCostInterval(e.target.innerText)}>Weekly</div>\n            <div className={selectedCostInterval === 'Monthly' ? 'selected-interval' : 'interval'} onClick={(e) => setSelectedCostInterval(e.target.innerText)}>Monthly</div>\n            <div className={selectedCostInterval === 'Yearly' ? 'selected-interval' : 'interval'} onClick={(e) => setSelectedCostInterval(e.target.innerText)}>Yearly</div>\n        </div>\n    );\n}\n\nexport default BillOptions;","import React, { useContext, useState } from 'react';\n\nimport './edit-bills.styles.css'\nimport { BillContext } from '../../context/bill-context';\n\nconst EditBills = () => {\n    const { bills, setEditModeEnabled, editBill, deleteBill } = useContext(BillContext);\n\n    return (\n        <div className='edit-bill-container text-center'>\n            <button className='edit-mode-btn btn btn-info' onClick={() => setEditModeEnabled(false)}>Done</button>\n            {\n                bills.map((bill, billIndex) => {\n                    return (\n                        <div key={billIndex} className='edit-bill-row'>\n                            <div className='edit-bill-row-content'>\n                                <div className='edit-bill-title'>{bill.title}</div>\n                                <input className='edit-bill-cost-input' type='number' value={bill.monthlyCost} onChange={(e) => editBill({\n                                    title: bill.title,\n                                    enabled: bill.enabled,\n                                    monthlyCost: e.target.value\n                                })} />\n                                <button className='btn btn-danger' onClick={() => deleteBill(bill)}>DELETE</button>\n                            </div>\n                            <hr></hr>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default EditBills;","import React, { useContext } from 'react';\nimport AddBill from './components/addbills/addbill.component';\nimport './App.css';\nimport { BillContext } from './context/bill-context';\nimport BillList from './components/bill-list/bill-list.component';\nimport BillTotal from './components/billtotal/billtotal.component';\nimport BillOptions from './components/bill-options/bill-options.component';\nimport EditBills from './components/edit-bills/edit-bills.component';\n\nconst App = () => {\n\n\n  const { editModeEnabled } = useContext(BillContext);\n\n  //provider wrap provides state to component, thrown in index.js around our entire app, need to wrap whole app in it\n\n\n  // if editMode is enabled, we only want to display editBills component\n  //if editMode is not enabled we want to display everything else\n  return (\n    <div className='container-fluid panel'>\n      <div className='bills-container'>\n        {\n          editModeEnabled ? <EditBills /> : <span><BillOptions /> <AddBill /><BillTotal /> <BillList /></span>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BillProvider } from './context/bill-context';\n\nReactDOM.render(<BillProvider><App /></BillProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}